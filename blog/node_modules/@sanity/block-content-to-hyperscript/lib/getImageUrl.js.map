{"version":3,"sources":["../src/getImageUrl.js"],"names":["generateHelpUrl","require","urlBuilder","objectAssign","enc","encodeURIComponent","materializeError","getQueryString","query","options","imageOptions","keys","Object","length","params","map","key","join","buildUrl","node","props","projectId","dataset","asset","Error","url","ref","_ref","image","toString","module","exports"],"mappings":";;AAAA,IAAMA,kBAAkBC,QAAQ,2BAAR,CAAxB;AACA,IAAMC,aAAaD,QAAQ,mBAAR,CAAnB;AACA,IAAME,eAAeF,QAAQ,eAAR,CAArB;;AAEA,IAAMG,MAAMC,kBAAZ;AACA,IAAMC,oLAIsBN,gBAAgB,mCAAhB,CAJ5B;;AAMA,IAAMO,iBAAiB,SAAjBA,cAAiB,UAAW;AAChC,MAAMC,QAAQC,QAAQC,YAAtB;AACA,MAAMC,OAAOC,OAAOD,IAAP,CAAYH,KAAZ,CAAb;AACA,MAAI,CAACG,KAAKE,MAAV,EAAkB;AAChB,WAAO,EAAP;AACD;;AAED,MAAMC,SAASH,KAAKI,GAAL,CAAS;AAAA,WAAUX,IAAIY,GAAJ,CAAV,SAAsBZ,IAAII,MAAMQ,GAAN,CAAJ,CAAtB;AAAA,GAAT,CAAf;AACA,eAAWF,OAAOG,IAAP,CAAY,GAAZ,CAAX;AACD,CATD;;AAWA,IAAMC,WAAW,SAAXA,QAAW,QAAS;AAAA,MACjBC,IADiB,GACAC,KADA,CACjBD,IADiB;AAAA,MACXV,OADW,GACAW,KADA,CACXX,OADW;AAAA,MAEjBY,SAFiB,GAEKZ,OAFL,CAEjBY,SAFiB;AAAA,MAENC,OAFM,GAEKb,OAFL,CAENa,OAFM;;AAGxB,MAAMC,QAAQJ,KAAKI,KAAnB;;AAEA,MAAI,CAACA,KAAL,EAAY;AACV,UAAM,IAAIC,KAAJ,CAAU,+CAAV,CAAN;AACD;;AAED,MAAID,MAAME,GAAV,EAAe;AACb,WAAOF,MAAME,GAAN,GAAYlB,eAAeE,OAAf,CAAnB;AACD;;AAED,MAAI,CAACY,SAAD,IAAc,CAACC,OAAnB,EAA4B;AAC1B,UAAM,IAAIE,KAAJ,CAAUlB,gBAAV,CAAN;AACD;;AAED,MAAMoB,MAAMH,MAAMI,IAAlB;AACA,MAAI,CAACD,GAAL,EAAU;AACR,UAAM,IAAIF,KAAJ,CAAU,8DAAV,CAAN;AACD;;AAED,SAAOtB,WAAWC,aAAa,EAACkB,oBAAD,EAAYC,gBAAZ,EAAb,EAAmCb,QAAQC,YAAR,IAAwB,EAA3D,CAAX,EACJkB,KADI,CACET,IADF,EAEJU,QAFI,EAAP;AAGD,CAzBD;;AA2BAC,OAAOC,OAAP,GAAiBb,QAAjB","file":"getImageUrl.js","sourcesContent":["const generateHelpUrl = require('@sanity/generate-help-url')\nconst urlBuilder = require('@sanity/image-url')\nconst objectAssign = require('object-assign')\n\nconst enc = encodeURIComponent\nconst materializeError = `You must either:\n  - Pass \\`projectId\\` and \\`dataset\\` to the block renderer\n  - Materialize images to include the \\`url\\` field.\n\nFor more information, see ${generateHelpUrl('block-content-image-materializing')}`\n\nconst getQueryString = options => {\n  const query = options.imageOptions\n  const keys = Object.keys(query)\n  if (!keys.length) {\n    return ''\n  }\n\n  const params = keys.map(key => `${enc(key)}=${enc(query[key])}`)\n  return `?${params.join('&')}`\n}\n\nconst buildUrl = props => {\n  const {node, options} = props\n  const {projectId, dataset} = options\n  const asset = node.asset\n\n  if (!asset) {\n    throw new Error('Image does not have required `asset` property')\n  }\n\n  if (asset.url) {\n    return asset.url + getQueryString(options)\n  }\n\n  if (!projectId || !dataset) {\n    throw new Error(materializeError)\n  }\n\n  const ref = asset._ref\n  if (!ref) {\n    throw new Error('Invalid image reference in block, no `_ref` found on `asset`')\n  }\n\n  return urlBuilder(objectAssign({projectId, dataset}, options.imageOptions || {}))\n    .image(node)\n    .toString()\n}\n\nmodule.exports = buildUrl\n"]}