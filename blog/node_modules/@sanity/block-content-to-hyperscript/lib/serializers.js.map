{"version":3,"sources":["../src/serializers.js"],"names":["objectAssign","require","getImageUrl","module","exports","h","serializerOpts","serializeOptions","useDashedStyles","BlockSerializer","props","node","serializers","options","isInline","children","blockType","_type","serializer","types","Error","SpanSerializer","mark","isPlain","markType","marks","console","warn","markFallback","ListSerializer","tag","type","ListItemSerializer","style","block","BlockTypeSerializer","test","RawMarkSerializer","UnderlineSerializer","textDecoration","StrikeThroughSerializer","LinkSerializer","href","ImageSerializer","asset","img","src","serializeSpan","span","index","hardBreak","key","text","map","child","i","serializeNode","serializedNode","_key","HardBreakSerializer","defaultMarkSerializers","strong","bind","em","code","underline","link","defaultSerializers","image","list","listItem","container","undefined","empty"],"mappings":"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","file":"serializers.js","sourcesContent":["const objectAssign = require('object-assign')\nconst getImageUrl = require('./getImageUrl')\n\nmodule.exports = (h, serializerOpts) => {\n  const serializeOptions = serializerOpts || {useDashedStyles: false}\n\n  // Low-level block serializer\n  function BlockSerializer(props) {\n    const {node, serializers, options, isInline, children} = props\n    const blockType = node._type\n    const serializer = serializers.types[blockType]\n    if (!serializer) {\n      throw new Error(\n        `Unknown block type \"${blockType}\", please specify a serializer for it in the \\`serializers.types\\` prop`\n      )\n    }\n\n    return h(serializer, {node, options, isInline}, children)\n  }\n\n  // Low-level span serializer\n  function SpanSerializer(props) {\n    const {mark, children} = props.node\n    const isPlain = typeof mark === 'string'\n    const markType = isPlain ? mark : mark._type\n    const serializer = props.serializers.marks[markType]\n    if (!serializer) {\n      // @todo Revert back to throwing errors?\n      // eslint-disable-next-line no-console\n      console.warn(\n        `Unknown mark type \"${markType}\", please specify a serializer for it in the \\`serializers.marks\\` prop`\n      )\n      return h(props.serializers.markFallback, null, children)\n    }\n\n    return h(serializer, props.node, children)\n  }\n\n  // Low-level list serializer\n  function ListSerializer(props) {\n    const tag = props.type === 'bullet' ? 'ul' : 'ol'\n    return h(tag, null, props.children)\n  }\n\n  // Low-level list item serializer\n  function ListItemSerializer(props) {\n    const children =\n      !props.node.style || props.node.style === 'normal'\n        ? // Don't wrap plain text in paragraphs inside of a list item\n          props.children\n        : // But wrap any other style in whatever the block serializer says to use\n          h(props.serializers.types.block, props, props.children)\n\n    return h('li', null, children)\n  }\n\n  // Renderer of an actual block of type `block`. Confusing, we know.\n  function BlockTypeSerializer(props) {\n    const style = props.node.style || 'normal'\n\n    if (/^h\\d/.test(style)) {\n      return h(style, null, props.children)\n    }\n\n    return style === 'blockquote'\n      ? h('blockquote', null, props.children)\n      : h('p', null, props.children)\n  }\n\n  // Serializers for things that can be directly attributed to a tag without any props\n  // We use partial application to do this, passing the tag name as the first argument\n  function RawMarkSerializer(tag, props) {\n    return h(tag, null, props.children)\n  }\n\n  function UnderlineSerializer(props) {\n    const style = serializeOptions.useDashedStyles\n      ? {'text-decoration': 'underline'}\n      : {textDecoration: 'underline'}\n\n    return h('span', {style}, props.children)\n  }\n\n  function StrikeThroughSerializer(props) {\n    return h('del', null, props.children)\n  }\n\n  function LinkSerializer(props) {\n    return h('a', {href: props.mark.href}, props.children)\n  }\n\n  function ImageSerializer(props) {\n    if (!props.node.asset) {\n      return null\n    }\n\n    const img = h('img', {src: getImageUrl(props)})\n    return props.isInline ? img : h('figure', null, img)\n  }\n\n  // Serializer that recursively calls itself, producing a hyperscript tree of spans\n  function serializeSpan(span, serializers, index, options) {\n    if (span === '\\n' && serializers.hardBreak) {\n      return h(serializers.hardBreak, {key: `hb-${index}`})\n    }\n\n    if (typeof span === 'string') {\n      return serializers.text ? h(serializers.text, {key: `text-${index}`}, span) : span\n    }\n\n    let children\n    if (span.children) {\n      children = {\n        children: span.children.map((child, i) =>\n          options.serializeNode(child, i, span.children, true)\n        )\n      }\n    }\n\n    const serializedNode = objectAssign({}, span, children)\n\n    return h(serializers.span, {\n      key: span._key || `span-${index}`,\n      node: serializedNode,\n      serializers\n    })\n  }\n\n  const HardBreakSerializer = () => h('br')\n  const defaultMarkSerializers = {\n    strong: RawMarkSerializer.bind(null, 'strong'),\n    em: RawMarkSerializer.bind(null, 'em'),\n    code: RawMarkSerializer.bind(null, 'code'),\n    underline: UnderlineSerializer,\n    'strike-through': StrikeThroughSerializer,\n    link: LinkSerializer\n  }\n\n  const defaultSerializers = {\n    // Common overrides\n    types: {\n      block: BlockTypeSerializer,\n      image: ImageSerializer\n    },\n    marks: defaultMarkSerializers,\n\n    // Less common overrides\n    list: ListSerializer,\n    listItem: ListItemSerializer,\n\n    block: BlockSerializer,\n    span: SpanSerializer,\n    hardBreak: HardBreakSerializer,\n\n    // Container element\n    container: 'div',\n\n    // When we can't resolve the mark properly, use this renderer as the container\n    markFallback: 'span',\n\n    // Allow overriding text renderer, but leave undefined to just use plain strings by default\n    text: undefined,\n\n    // Empty nodes (React uses null, hyperscript with empty strings)\n    empty: ''\n  }\n\n  return {\n    defaultSerializers,\n    serializeSpan\n  }\n}\n"]}