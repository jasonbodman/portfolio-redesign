{"version":3,"sources":["../src/blocksToNodes.js"],"names":["objectAssign","require","buildMarksTree","nestLists","generateKeys","mergeSerializers","optionProps","isDefined","val","defaults","imageOptions","blocksToNodes","h","properties","defaultSerializers","serializeSpan","props","rawBlocks","Array","isArray","blocks","keyedBlocks","listNestMode","serializers","options","reduce","opts","key","value","serializeNode","node","index","siblings","isInline","isList","serializeList","isListItem","serializeListItem","findListItemIndex","isSpan","serializeBlock","i","length","block","tree","children","map","blockProps","_key","listItem","list","type","level","renderContainerOnSingleChild","Boolean","nodes","containerProps","className","container","empty","_type","marks","module","exports"],"mappings":"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","file":"blocksToNodes.js","sourcesContent":["const objectAssign = require('object-assign')\nconst buildMarksTree = require('./buildMarksTree')\nconst nestLists = require('./nestLists')\nconst generateKeys = require('./generateKeys')\nconst mergeSerializers = require('./mergeSerializers')\n\n// Properties to extract from props and pass to serializers as options\nconst optionProps = ['projectId', 'dataset', 'imageOptions']\nconst isDefined = val => typeof val !== 'undefined'\nconst defaults = {imageOptions: {}}\n\nfunction blocksToNodes(h, properties, defaultSerializers, serializeSpan) {\n  const props = objectAssign({}, defaults, properties)\n  const rawBlocks = Array.isArray(props.blocks) ? props.blocks : [props.blocks]\n  const keyedBlocks = generateKeys(rawBlocks)\n  const blocks = nestLists(keyedBlocks, props.listNestMode)\n  const serializers = mergeSerializers(defaultSerializers, props.serializers || {})\n\n  const options = optionProps.reduce((opts, key) => {\n    const value = props[key]\n    if (isDefined(value)) {\n      opts[key] = value\n    }\n    return opts\n  }, {})\n\n  function serializeNode(node, index, siblings, isInline) {\n    if (isList(node)) {\n      return serializeList(node)\n    }\n\n    if (isListItem(node)) {\n      return serializeListItem(node, findListItemIndex(node, siblings))\n    }\n\n    if (isSpan(node)) {\n      return serializeSpan(node, serializers, index, {serializeNode})\n    }\n\n    return serializeBlock(node, index, isInline)\n  }\n\n  function findListItemIndex(node, siblings) {\n    let index = 0\n    for (let i = 0; i < siblings.length; i++) {\n      if (siblings[i] === node) {\n        return index\n      }\n\n      if (!isListItem(siblings[i])) {\n        continue\n      }\n\n      index++\n    }\n\n    return index\n  }\n\n  function serializeBlock(block, index, isInline) {\n    const tree = buildMarksTree(block)\n    const children = tree.map((node, i, siblings) => serializeNode(node, i, siblings, true))\n    const blockProps = {\n      key: block._key || `block-${index}`,\n      node: block,\n      isInline,\n      serializers,\n      options\n    }\n\n    return h(serializers.block, blockProps, children)\n  }\n\n  function serializeListItem(block, index) {\n    const key = block._key\n    const tree = buildMarksTree(block)\n    const children = tree.map(serializeNode)\n    return h(serializers.listItem, {node: block, serializers, index, key, options}, children)\n  }\n\n  function serializeList(list) {\n    const type = list.listItem\n    const level = list.level\n    const key = list._key\n    const children = list.children.map(serializeNode)\n    return h(serializers.list, {key, level, type, options}, children)\n  }\n\n  // Default to false, so `undefined` will evaluate to the default here\n  const renderContainerOnSingleChild = Boolean(props.renderContainerOnSingleChild)\n\n  const nodes = blocks.map(serializeNode)\n  if (renderContainerOnSingleChild || nodes.length > 1) {\n    const containerProps = props.className ? {className: props.className} : {}\n    return h(serializers.container, containerProps, nodes)\n  }\n\n  if (nodes[0]) {\n    return nodes[0]\n  }\n\n  return typeof serializers.empty === 'function' ? h(serializers.empty) : serializers.empty\n}\n\nfunction isList(block) {\n  return block._type === 'list' && block.listItem\n}\n\nfunction isListItem(block) {\n  return block._type === 'block' && block.listItem\n}\n\nfunction isSpan(block) {\n  return typeof block === 'string' || block.marks || block._type === 'span'\n}\n\nmodule.exports = blocksToNodes\n"]}